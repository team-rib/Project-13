 //This program is written by tane and ozono.
 //We create it to challenge this game.

 #define MOVE_POWER 50         //0~100
 #define LIGHT_LIMIT 500       //0~1023

 mutex time_mutex;
 long init_time,time;

 //prototype declaration
 sub Init();
 sub Left();
 sub Right();
 sub Fwd();
 sub Back();
 sub FwdRate(int left_rate,int right_rate);
 int LightAve(int sensor_num,int size);
 sub ResetClock();
 bool SearchAround();
 sub RotateAround();
 sub MoveAround();
 task clock();

 //////////////
 ///  task  ///
 //////////////

 //main
 task main(){
      //initial setting
      Init();

      while(true){
           if(SENSOR_2 > LIGHT_LIMIT){//if the light sensor exceeds LIGHT_LIMIT
                 RotateAround();
                 while(SearchAround()){
                      Fwd();
                      Wait(1000);
                 }
                 ResetClock();
           }else{
                 MoveAround();
           }
      }

 }

 //always update time
 task clock(){
      while(true){
           Acquire(time_mutex);
           time = CurrentTick() - init_time;
           Release(time_mutex);
      }
 }

 //////////////////
 //  subroutine  //
 //////////////////

 //initial setting
 sub Init(){
     SetSensorType(IN_1,SENSOR_TYPE_LIGHT_ACTIVE);
     SetSensorMode(IN_1,SENSOR_MODE_RAW);
     SetSensorType(IN_2,SENSOR_TYPE_LIGHT_INACTIVE);
     SetSensorMode(IN_2,SENSOR_MODE_RAW);
     StartTask(clock);
     ResetClock();
 }
 //turn left
 sub Left(){
     OnFwd(OUT_A,MOVE_POWER);
     OnRev(OUT_B,MOVE_POWER);
 }
 //turn right
 sub Right(){
     OnFwd(OUT_B,MOVE_POWER);
     OnRev(OUT_A,MOVE_POWER);
 }
 //go forward
 sub Fwd(){
     OnFwdSync(OUT_AB,MOVE_POWER,0);
 }
 //go back
 sub Back(){
     OnRevSync(OUT_AB,MOVE_POWER,0);
 }
 //rotate at a fixed rate
 sub FwdRate(int left_rate,int right_rate){
     if(left_rate < right_rate){
           OnFwd(OUT_A,100*left_rate/right_rate);
           OnFwd(OUT_B,100);
     }else{
           OnFwd(OUT_A,100);
           OnFwd(OUT_B,100*right_rate/left_rate);
     }

 }

 //take the average of light sensor values
 int LightAve(int sensor_num,int size){
     int sum = 0;
     int i;
     for(i = 0; i < size; i++){
           sum += SensorRaw(sensor_num);
           Wait(100);
     }
     return sum/size;
 }
 
 //search a ball all around
 //if find a ball,this function return true
 bool SearchAround(){
     ResetClock();
     while(true){
          //if the light sensor exceeds LIGHT_LIMIT
          if(SENSOR_2 > LIGHT_LIMIT){
                return true;
          }
          
          if(time < 250){
                Left();
          }else if(time < 750){
                Right();
          }else if(time < 1500){
                Left();
          }else if(time < 2750){
                Right();
          }else if(time < 4750){
                Left();
          }else if(time < 6000){
                return false;
          }

     }
 }
 
 //reset clock
 sub ResetClock(){
     Acquire(time_mutex);
     init_time = CurrentTick();
     time = 0;
     Release(time_mutex);
 }
 
 sub RotateAround(){
      int late_value = SENSOR_1;
      Back();
      Wait(1500);

      //shironohouga,ataiookii?
      if(late_value < SENSOR_1){
           Fwd();
           Wait(1500);

           Left();
           Wait(1000);

           FwdRate(3,5);
           Wait(4000);

           Right();
           Wait(1000);
      }
      Fwd();
      Wait(1500);
 }
 
 sub MoveAround(){
     if(time < 2000){
          Fwd();
     }else if(time < 3000){
          Left();
     }else if(time < 5000){
          Right();
     }else if(time < 6000){
          Left();
     }else{
          ResetClock();
     }

 }
